// -------------QUICKSORT-------------
template <typename T>
size_t partition(T* arr, size_t left, size_t right, T pivot)
{
	while(left <= right)
	{
		while (arr[left] < pivot)
		{
			left++;
		}
		
		while (arr[right] > pivot)
		{
			right--;
		}

		if (left <= right)
		{
			swap(arr[left], arr[right]);
			left++;
			right--;
		}
	}
	return left;
}

template <typename T>
void quickSort(T* arr, size_t left, size_t right)
{
	if (left >= right)
	{
		return;
	}
	T pivot = arr[(left + right) / 2];
	size_t index = partition(arr, left, right, pivot);
	quickSort(arr, left, index - 1);
	quickSort(arr, index, right);
}


// -------------HEAPSORT-------------
template <typename T>
void heapify(T* arr, size_t size, size_t rootIndex)
{
	size_t largest = rootIndex;
	size_t left = 2 * rootIndex + 1;
	size_t right = 2 * rootIndex + 2;

	if (left < size && arr[left] > arr[largest])
		largest = left;

	if (right < size && arr[right] > arr[largest])
		largest = right;

	if (largest != rootIndex)
	{
		swap(arr[rootIndex], arr[largest]);

		heapify(arr, size, largest);
	}
}

template <typename T>
void heapSort(T* arr, size_t size)
{
	for (size_t i = size / 2 - 1; i >= 0; i--)
		heapify(arr, size, i);

	for (size_t i = size - 1; i >= 0; i--)
	{
		swap(arr[0], arr[i]);

		heapify(arr, i, 0);
	}
}
